@page "/measurementUnits/create"
@attribute [Authorize(Roles = "Planner")]
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<h3>Nueva Unidad de Medida</h3>

<MeasurementUnitsForm @ref="measurementUnitsForm" MeasurementUnit="measurementUnit" OnValidSubmit="CreateAsync" ReturnAction="Return" />

@code {
    private MeasurementUnit measurementUnit = new();
    private MeasurementUnitsForm? measurementUnitsForm;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private async Task CreateAsync()
    {
        var response = await repository.PostAsync("/api/measurementUnits", measurementUnit);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro creado con éxito.");
    }

    private void Return()
    {
        measurementUnitsForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/measurementUnits");
    }
}