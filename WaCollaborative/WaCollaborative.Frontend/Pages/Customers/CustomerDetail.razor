@page "/customers/customerdetails/{customerId:int}"
@attribute [Authorize(Roles = "Planner")]
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService


@if (customer is null)
{
    <Loading />
}
else
{
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-globe"></i>Cliente: @customer.Name
                <a class="btn btn-sm btn-primary float-end mx-1" @onclick=@(() => ShowModalAsync())><i class="oi oi-plus"></i> Adicionar Punto de Envío</a>
                <a class="btn btn-sm btn-success float-end" href="/customers"><i class="oi oi-arrow-thick-left" /> Regresar</a>
            </span>
        </div>
        <div class="card-body">
            <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                <div>                    
                </div>
                <div class="mx-1">                    
                </div>
            </div>
   
            <br>
            <h5>Puntos de Envío</h5>
            <hr>
            <GenericList List="shippingPoints!">
                <Body>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>punto de Envío</th>
                                <th>Ciudad</th>
                                <th style="width:168px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var shippingPoint in shippingPoints!)
                            {
                                <tr>
                                    <td>@shippingPoint.Name</td>
                                    <td>@shippingPoint.City!.Name</td>
                                    <td>                                       
                                        <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(shippingPoint))><i class="oi oi-trash" /> Borrar</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </Body>
            </GenericList>
        </div>
    </div>
}

@code {
    private Customer? customer;
    private ShippingPoint? shippingPoint;
    private List<ShippingPoint>? shippingPoints;

    [Parameter]
    public int customerId { get; set; }
    private int currentPage = 1;
    private int totalPages;

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;
    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    public bool FormPostedSuccessfully { get; set; }
   
    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    private async Task LoadAsync()
    {
        var ok = await LoadCustomerAsync();
        if (ok)
        {
            await LoadShippingPointsAsync();

        }
    }

    private async Task<bool> LoadCustomerAsync()
    {
        var response = await repository.GetAsync<Customer>($"/api/Customers/{customerId}");
        if (response.Error)
        {
            if (response.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/customers");
                return false;
            }

            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        customer = response.Response;
        return true;
    }

    private async Task<bool> LoadShippingPointsAsync()
    {
        var response = await repository.GetAsync<List<ShippingPoint>>($"/api/ShippingPoints/combo/{customerId}");
        if (response.Error)
        {
            if (response.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/customers");
                return false;
            }

            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        shippingPoints = response.Response;
        return true;
    }

    private async Task<bool> LoadShippingPointsCustomersAsync()
    {
        var url = string.Empty;

        var response = await repository.GetAsync<List<ShippingPoint>>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        shippingPoints = response.Response;
        return true;
    }

    private async Task ShowModalAsync(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        modalReference = Modal.Show<ShippingPointCreate>(string.Empty, new ModalParameters().Add("customerId", customerId));

    }

    private async Task DeleteAsync(ShippingPoint shippingP)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Esta seguro que quieres borrar el punto de envío: {shippingP.Name}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var response = await repository.DeleteAsync($"api/ShippingPoints/{shippingP.Id}");
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await LoadAsync();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }
}
