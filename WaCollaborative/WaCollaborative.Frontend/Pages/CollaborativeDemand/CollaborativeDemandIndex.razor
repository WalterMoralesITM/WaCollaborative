@page "/collaboration"
@using System.Globalization;
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@* @using System.Collections.Generic *@

@attribute [Authorize(Roles = "Planner,Collaborator")]

@if (CollaborativeDemands is null)
{
    <Loading />
}
else
{
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-dollar" /> Demanda Collaborativa
            </span>
        </div>
        <div class="card-body">
            <MudDataGrid T="CollaborativeDemandDTO" MultiSelection="true" Items="@CollaborativeDemands"
                         SortMode="SortMode.Multiple" Filterable="true"
                         ReadOnly="@_isReadOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
                         StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
                         Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)"
                         Hideable="true">
                <ToolBarContent>             
                    <MudSpacer />
                    <MudTextField Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <Columns>
                    <SelectColumn T="CollaborativeDemandDTO" />
                    <PropertyColumn Property="x => x.CollaborativeDemandId" IsEditable="false" Hidden />
                     <PropertyColumn Property="x => x.CollaborativeDemandDetailId" IsEditable="false" Hidden />                     
                     <PropertyColumn Property="x => x.CustomerName" IsEditable="false" Title="Cliente" />
                     <PropertyColumn Property="x => x.CityName" IsEditable="false" Title="Ciudad" />
                     <PropertyColumn Property="x => x.DistributionChannel" IsEditable="false" Title="Canal Distribución" />
                     <PropertyColumn Property="x => x.ShippingPointName" IsEditable="false" Title="Punto de Envío" />                     
                     <PropertyColumn Property="x => x.ProductName" IsEditable="false" Title="Producto" />
                     <PropertyColumn Property="x => x.YearMonth" IsEditable="false" Title="Año-Mes" />
                     <PropertyColumn Property="x => x.Quantity" IsEditable="true" Title="Colaboración" Format="N2" Culture="@(new CultureInfo("en-US"))">
                     </PropertyColumn> />                    
                 </Columns>
                 <PagerContent>
                     <MudDataGridPager T="CollaborativeDemandDTO" />
                 </PagerContent>
             </MudDataGrid>
             <div class="d-flex flex-wrap mt-4">
                 <div class="d-flex justify-start align-center">

                     <MudSwitch @bind-Checked="@_isCellEditMode">Cell</MudSwitch>
                 </div>
                 <div class="d-flex justify-start align-center">
                     <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Manual</p>
                     <MudSwitch @bind-Checked="@_editTriggerRowClick">On Row Click</MudSwitch>
                 </div>
             </div>
             <MudExpansionPanels Style="flex:1">
                 <MudExpansionPanel Text="Show Events">
                     @foreach (var message in _events)
                    {
                        <MudText Typo="@Typo.body2">@message</MudText>
                    }
                    @if (_events.Count > 0)
                    {
                        <div class="d-flex">
                            <MudSpacer />
                            <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
                        </div>
                    }
                </MudExpansionPanel>
            </MudExpansionPanels>
        </div>
    </div>
}
@code {

    private int currentPage = 1;
    private int totalPages;
    private string? _searchString;
    private bool _sortNameByLength;
    //private bool _readOnly = false;
    private bool _isReadOnly = false;
    private bool _isCellEditMode = true;
    private bool _editTriggerRowClick;
    private List<string> _events = new();

    public List<CollaborativeDemandDTO>? CollaborativeDemands { get; set; }

    public List<CollaborativeDemandComponentsDetail>? ComponentDetails { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        var ok = await LoadListAsync(page);
        if (ok)
        {
            await LoadPagesAsync();
        }
    }

    private async Task<bool> LoadListAsync(int page)
    {
        var url = $"api/CollaborativeDemand?page={page}";
        var response = await repository.GetAsync<List<CollaborativeDemandDTO>>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        CollaborativeDemands = response.Response;

        return true;
    }

    private async Task LoadPagesAsync()
    {
        var url = $"api/CollaborativeDemand/totalPages";
        var response = await repository.GetAsync<int>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        totalPages = response.Response;
    }

    void RowClicked(DataGridRowClickEventArgs<CollaborativeDemandDTO> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    private void ToCollaborate(CollaborativeDemandDTO collaboration)
    {
        // Aquí puedes realizar acciones específicas cuando se contrata a un empleado.
        // Por ejemplo, mostrar una alerta con los datos del empleado.
        string message = $"Contrataste a {collaboration.CustomerName} .";
        // Puedes usar la variable 'message' para mostrar una alerta o realizar otras acciones.
        // Por ejemplo, mostrar una alerta utilizando MudBlazor's MudDialogService.
        // MudDialogService.ShowMessageBox("Empleado Contratado", message, "Aceptar");
    }

    void StartedEditingItem(CollaborativeDemandDTO item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(CollaborativeDemandDTO item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    async Task CommittedItemChanges(CollaborativeDemandDTO item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}"); 
        
        if (!EsDecimalOEntero(item.Quantity))
        {
            // Mostrar mensaje de error o manejar la situación de validación fallida
            await sweetAlertService.FireAsync("Error", "El valor de colaboración no es un número decimal o entero válido.", SweetAlertIcon.Error);
            return;
        }

        var collaboration = new CollaborativeDemandComponentsDetail
            {
                Id = item.CollaborativeDemandDetailId,
                Quantity = item.Quantity,                
                CollaborativeDemandId =  item.Id
                
            };

        var responseHTTP = await repository.PutAsync("api/CollaborativeDemandComponentsDetail/full", collaboration);
        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Cambios guardados con éxito.");
    }

    bool EsDecimalOEntero(decimal cantidad)
    {
        // Utiliza el tipo decimal directamente para la validación
        return decimal.Truncate(cantidad) == cantidad;
    }
    
}

