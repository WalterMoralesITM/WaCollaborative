 @* @page "/collaborationTest"  *@
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@using System.Collections.Generic
@using System.Linq.Expressions;
@using System.Reflection;

@attribute [Authorize(Roles = "Planner,Collaborator")]

@if (CollaborativeDemands is null)
{
    <Loading />
}
else
{
    <MudDataGrid T="CollaborativeDemandDTO" MultiSelection="true" Items="@CollaborativeDemands" SortMode="SortMode.Multiple" Filterable="true"
                 ReadOnly="@_isReadOnly" EditMode="@DataGridEditMode.Cell" Hideable="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Demanda Collaborativa</MudText>
            <MudSpacer />
            <MudTextField Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <HierarchyColumn T="CollaborativeDemandDTO" />
            <SelectColumn T="CollaborativeDemandDTO" />
            <PropertyColumn Property="x => x.CollaborativeDemandId" />
            <PropertyColumn Property="x => x.CustomerCode" Title="Codigo Cliente" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.CustomerName" />
            <PropertyColumn Property="x => x.CityName" />
            <PropertyColumn Property="x => x.DistributionChannel" />
            <PropertyColumn Property="x => x.ShippingPointName" />
            <PropertyColumn Property="x => x.ProductCode" />
            <PropertyColumn Property="x => x.ProductName" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudStack Row>                     
                     <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">Hire</MudButton>
                 </MudStack>
             </CellTemplate>
         </TemplateColumn>
        </Columns>
    </MudDataGrid>
}

@code {

    private int currentPage = 1;
    private int totalPages;
    private string? _searchString;
    private bool _sortNameByLength;
    private bool _isReadOnly = true;
    private List<string> _events = new();

    public List<CollaborativeDemandDTO>? CollaborativeDemands { get; set; }

    public List<CollaborativeDemandComponentDTO>? CollaborativeDemandComponentsDetailsDTO { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    private Expression<Func<CollaborativeDemandComponentDTO, string>> GetStringPropertyLambdaExpression(System.Reflection.PropertyInfo propertyInfo)
    {
        // Define a parameter for the lambda expression
        ParameterExpression param = Expression.Parameter(typeof(CollaborativeDemandComponentDTO), "x");

        // Create an expression to access the property
        Expression propertyAccess = Expression.Property(param, propertyInfo);


        // Create a lambda expression that takes an AType parameter and returns its Name property
        Expression<Func<CollaborativeDemandComponentDTO, string>> lambdaExpression = Expression.Lambda<Func<CollaborativeDemandComponentDTO, string>>(propertyAccess, param);

        return lambdaExpression;
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        var ok = await LoadListAsync(page);
        if (ok)
        {
            await LoadPagesAsync();
        }
    }

    private async Task<bool> LoadListAsync(int page)
    {
        var url = $"api/CollaborativeDemand?page={page}";
        var response = await repository.GetAsync<List<CollaborativeDemandDTO>>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        CollaborativeDemands = response.Response;

        LoadComponentDetailsAsync();

        return true;
    }
    private void LoadComponentDetailsAsync()
    {
        try
        {
            CollaborativeDemandComponentsDetailsDTO  = new List<CollaborativeDemandComponentDTO>();

            foreach (var collaborativeDemand in CollaborativeDemands)
            {
                foreach (var componentDetail in collaborativeDemand.CollaborativeDemandComponentsDetails)
                {
                    var componentDTO = new CollaborativeDemandComponentDTO
                        {
                            CollaborativeDemandId = componentDetail.CollaborativeDemandId,
                            YearMonth = componentDetail.YearMonth,
                            Quantity = componentDetail.Quantity,
                            UserEmail = componentDetail.User.Email,
                            UserId = componentDetail.User.Id

                        };

                    CollaborativeDemandComponentsDetailsDTO.Add(componentDTO);
                }
            }

            // typoOflist();

        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }

    }

    private void typoOflist()
    {
        foreach (var obj in CollaborativeDemandComponentsDetailsDTO)
        {
            Type tipo = obj.GetType();

            Console.WriteLine("Tipo de objeto: " + tipo.Name);

            if (tipo.IsClass)
            {
                PropertyInfo[] propiedades = tipo.GetProperties();

                foreach (var propiedad in propiedades)
                {
                    Type tipoDePropiedad = propiedad.PropertyType;
                    string nombreDePropiedad = propiedad.Name;

                    Console.WriteLine($"Propiedad: {nombreDePropiedad}, Tipo: {tipoDePropiedad.Name}");
                }
            }

            Console.WriteLine();
        }
    
    }

    private async Task LoadPagesAsync()
    {
        var url = $"api/CollaborativeDemand/totalPages";
        var response = await repository.GetAsync<int>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        totalPages = response.Response;
    }

    void RowClicked(DataGridRowClickEventArgs<CollaborativeDemandDTO> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }



}

