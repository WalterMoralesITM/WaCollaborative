@page "/products"
@attribute [Authorize(Roles = "Planner")]
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<div class="card">
    <div class="card-header">
        <span>
            <i class="oi oi-list"></i> Productos
            <a class="btn btn-sm btn-primary float-end" @onclick=@(() => ShowModalAsync())><i class="oi oi-plus"></i> Adicionar Producto</a>
        </span>
    </div>
    <div class="card-body">
        <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
            <div>
                <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar producto..." @bind-value="Filter" />
            </div>
            <div class="mx-1">
                <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
            </div>
        </div>

        <GenericList List="products">
            <NoRecords>
                <p>Aun no hay productos registrados.</p>
            </NoRecords>
            <Body>
                <Pagination CurrentPage="currentPage"
                            TotalPages="totalPages"
                            SelectedPage="SelectedPageAsync" />

                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Producto</th>
                            <th>Código</th>
                            <th>Factor Conversión</th>
                            <th style="width:210px">Categoría</th>
                            <th style="width:210px">Unidad de Medida</th>
                            <th style="width:210px">Segmento</th>
                            <th style="width:210px">Estado</th>
                            <th style="width:168px"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in products!)
                        {
                            <tr>
                                <td>@product.Name</td>
                                <td>@product.Code</td>
                                <td>@product.ConversionFactor</td>
                                <td>@product.Category!.Name</td>
                                <td>@product.MeasurementUnit!.Name</td>
                                <td>@product.Segment!.Name</td>
                                <td>@product.Status!.Name</td>
                                <td>
                                    <a class="btn btn-warning btn-sm" @onclick=@(() => ShowModalAsync(product.Id, true))><i class="oi oi-pencil" /> Editar</a>
                                    @* <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(cliente))><i class="oi oi-trash" /> Borrar</button> *@
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </Body>
        </GenericList>
    </div>
</div>

@code {
    private List<Product>? products;

    private int currentPage = 1;
    private int totalPages;

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task ShowModalAsync(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<ProductEdit>(string.Empty, new ModalParameters().Add("ProductId", id));
        }
        else
        {
            modalReference = Modal.Show<ProductCreate>();
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        var ok = await LoadListAsync(page);
        if (ok)
        {
            await LoadPagesAsync();
        }
    }

    private async Task<bool> LoadPagesAsync()
    {
        var url = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url = $"api/products/totalPages";
        }
        else
        {
            url = $"api/products/totalPages?filter={Filter}";
        }

        var response = await repository.GetAsync<int>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        totalPages = response.Response;
        return true;
    }

    private async Task<bool> LoadListAsync(int page)
    {
        var url = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url = $"api/products?page={page}";
        }
        else
        {
            url = $"api/products?page={page}&filter={Filter}";
        }

        var response = await repository.GetAsync<List<Product>>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }

        products = response.Response;
        return true;
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task DeleteAsync(Product product)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Esta seguro que quieres borrar el producto: {product.Name}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var response = await repository.DeleteAsync($"api/products/{product.Id}");
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await LoadAsync();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }

}