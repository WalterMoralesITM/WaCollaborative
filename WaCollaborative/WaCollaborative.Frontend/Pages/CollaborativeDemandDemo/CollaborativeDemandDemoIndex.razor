@page "/collaborationDemo"

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@inject IJSRuntime JSRuntime

@if (CollaborativeDemandsDemo is null)
{
    <Loading />
}
else
{
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-people" /> Demanda Collaborativa - Demo
            </span>
        </div>
        <div class="card-body">
            <div class="row-cols-lg-9 row-cols-md-9 row-cols-sm-9 ">

                <MudDataGrid T="CollaborativeDemandDemo" MultiSelection="true" Items="@CollaborativeDemandsDemo"
                             SortMode="SortMode.Multiple" Filterable="true"
                             ReadOnly="@_isReadOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
                             StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
                             Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)"
                             Hideable="true">                    
                    <Columns>
                        <SelectColumn T="CollaborativeDemandDemo" />
                        <PropertyColumn Property="x => x.Id" IsEditable="false" Hidden />
                         <PropertyColumn Property="x => x.CustomerName"/>
                         <PropertyColumn Property="x => x.ProductName" Title="Cliente" Class="mud-col-lg-6 mud-col-md-8" />
                         <PropertyColumn Property="x => x.CityName" Title="Ciudad" Class="mud-col-lg-6 mud-col-md-8" />
                         <PropertyColumn Property="x => x.YearMonth" Title="Año-Mes" Class="mud-col-lg-6 mud-col-md-8" />
                         <PropertyColumn Property="x => x.Quantity" IsEditable="true" Title="Colaboración" Format="N2" Culture="@(new CultureInfo("en-US"))" Class="mud-col-lg-6 mud-col-md-8" />
                     </Columns>
                     <PagerContent>
                         <MudDataGridPager T="CollaborativeDemandDemo" />
                     </PagerContent>
                 </MudDataGrid>
                 <div class="d-flex flex-wrap mt-4">
                     <div class="d-flex justify-start align-center">

                         <MudSwitch @bind-Checked="@_isCellEditMode">Cell</MudSwitch>
                     </div>
                     <div class="d-flex justify-start align-center">
                         <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Manual</p>
                         <MudSwitch @bind-Checked="@_editTriggerRowClick">On Row Click</MudSwitch>
                     </div>
                 </div>
                 <MudExpansionPanels Style="flex:1">
                     <MudExpansionPanel Text="Show Events">
                         @foreach (var message in _events)
                        {
                            <MudText Typo="@Typo.body2">@message</MudText>
                        }
                        @if (_events.Count > 0)
                        {
                            <div class="d-flex">
                                <MudSpacer />
                                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
                            </div>
                        }
                    </MudExpansionPanel>
                </MudExpansionPanels>
            </div>
        </div>
    </div>
}
@code {

    private int currentPage = 1;
    private int totalPages;
    private string? _searchString;
    private bool _sortNameByLength;
    private bool _isReadOnly = false;
    private bool _isCellEditMode = true;
    private bool _editTriggerRowClick;
    private bool isDemandPlanActive = true;
    private string estadoPlanDemanda = "";
    private DateTime collaborationEndDate;


    private List<string> _events = new();

    public List<CollaborativeDemandDemo>? CollaborativeDemandsDemo { get; set; }


    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();

    }

    private async Task LoadAsync()
    {
        await LoadListAsync(currentPage);

    }

    private async Task<bool> LoadListAsync(int currentPage)
    {
        //var url = $"api/CollaborativeDemand?page={page}";
        // var url = $"api/CollaborativeDemandsDemo/All";
         var url = $"api/CollaborativeDemandsDemo";
        var response = await repository.GetAsync<List<CollaborativeDemandDemo>>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        CollaborativeDemandsDemo = response.Response;

        return true;
    }



    void RowClicked(DataGridRowClickEventArgs<CollaborativeDemandDemo> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void StartedEditingItem(CollaborativeDemandDemo item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(CollaborativeDemandDemo item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    async Task CommittedItemChanges(CollaborativeDemandDemo item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");

        if (!EsDecimalOEntero(item.Quantity))
        {
            await sweetAlertService.FireAsync("Error", "El valor de colaboración no es un número decimal o entero válido.", SweetAlertIcon.Error);
            return;
        }

        var collaboration = new CollaborativeDemandDemo
            {                
                Quantity = item.Quantity                

            };

        var responseHTTP = await repository.PutAsync("api/CollaborativeDemandsDemo", item);
        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Cambios guardados con éxito.");
    }

    bool EsDecimalOEntero(decimal cantidad)
    {
        return decimal.Truncate(cantidad) == cantidad;
    }

}