@page "/collaboration"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@using System.Collections.Generic

@attribute [Authorize(Roles = "Planner,Collaborator")]

@if (CollaborativeDemands is null)
{
    <Loading />
}
else
{
    <MudDataGrid T="CollaborativeDemandDTO" MultiSelection="true" Items="@CollaborativeDemands" SortMode="SortMode.Multiple" Filterable="true"
                 ReadOnly="@_isReadOnly" EditMode="@DataGridEditMode.Cell" Hideable="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Demanda Collaborativa</MudText>
            <MudSpacer />
            <MudTextField Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <HierarchyColumn T="CollaborativeDemandDTO" />
            <SelectColumn T="CollaborativeDemandDTO" />
            <PropertyColumn Property="x => x.CollaborativeDemandId" />
            <PropertyColumn Property="x => x.CustomerCode" Title="Codigo Cliente" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.CustomerName" />
            <PropertyColumn Property="x => x.CityName" />
            <PropertyColumn Property="x => x.DistributionChannel" />
            <PropertyColumn Property="x => x.ShippingPointName" />
            <PropertyColumn Property="x => x.ProductCode" />
            <PropertyColumn Property="x => x.ProductName" />
            <PropertyColumn Property="x => x.YearMonth" />
            <PropertyColumn Property="x => x.Quantity" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudStack Row>
                     <a href=" CollaborativeDemand/CollaborativeDemandEdit/@context.Item.CollaborativeDemandId">Colaborar</a>
                 </MudStack>
             </CellTemplate>
         </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@context.Item.Product</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>This element is number @context.Item.CustomerName</MudText>

                </MudCardContent>
            </MudCard>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="CollaborativeDemandDTO" />
        </PagerContent>
    </MudDataGrid>

    <div class="d-flex flex-wrap mt-4">
        <MudSwitch T="bool" @bind-Checked="@_isReadOnly" Color="Color.Primary">Sort Name Column By Length</MudSwitch>
    </div>

    <MudExpansionPanels Style="flex:1">
        <MudExpansionPanel Text="Show Events">
            @foreach (var message in _events)
            {
                <MudText Typo="@Typo.body2">@message</MudText>
            }
            @if (_events.Count > 0)
            {
                <div class="d-flex">
                    <MudSpacer />
                    <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
                </div>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>

}
@code {

    private int currentPage = 1;
    private int totalPages;
    private string? _searchString;
    private bool _sortNameByLength;
    private bool _isReadOnly = true;
    private List<string> _events = new();

    public List<CollaborativeDemandDTO>? CollaborativeDemands { get; set; }

    public List<CollaborativeDemandComponentsDetail>? ComponentDetails { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        var ok = await LoadListAsync(page);
        if (ok)
        {
            await LoadPagesAsync();
        }
    }

    private async Task<bool> LoadListAsync(int page)
    {
        var url = $"api/CollaborativeDemand?page={page}";
        var response = await repository.GetAsync<List<CollaborativeDemandDTO>>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
         CollaborativeDemands = response.Response;        

        return true;
    }

    private async Task LoadPagesAsync()
    {
        var url = $"api/CollaborativeDemand/totalPages";
        var response = await repository.GetAsync<int>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        totalPages = response.Response;
    }    

    void RowClicked(DataGridRowClickEventArgs<CollaborativeDemandDTO> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    private void ToCollaborate(CollaborativeDemandDTO collaboration)
    {
        // Aquí puedes realizar acciones específicas cuando se contrata a un empleado.
        // Por ejemplo, mostrar una alerta con los datos del empleado.
        string message = $"Contrataste a {collaboration.CustomerName} .";
        // Puedes usar la variable 'message' para mostrar una alerta o realizar otras acciones.
        // Por ejemplo, mostrar una alerta utilizando MudBlazor's MudDialogService.
        // MudDialogService.ShowMessageBox("Empleado Contratado", message, "Aceptar");
    }

}

