@page "/collaboration"
@attribute [Authorize(Roles = "Planner,Collaborator")]
@using System.Globalization;
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@inject IJSRuntime JSRuntime
@inject ExcelExporter ExcelExporter

@if (CollaborativeDemands is null)
{
    <Loading />
}
else
{    
        <div class="card">
            <div class="card-header">
                <span>
                    <i class="oi oi-people" /> Demanda Collaborativa
                </span>
            </div>
            <div class="card-body">
                <div class="row-cols-lg-9 row-cols-md-9 row-cols-sm-9 ">

                    <MudDataGrid T="CollaborativeDemandDTO" MultiSelection="true" Items="@CollaborativeDemands"
                                 SortMode="SortMode.Multiple" Filterable="true"
                                 ReadOnly="@_isReadOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
                                 StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
                                 Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)"
                                 Hideable="true">
                        <ToolBarContent>

                            <div class="mb-2" style="display: flex; flex-wrap:wrap;align-items: center; ">

                                <div class="mx-2">
                                    <button type="button" class="btn btn-info" @onclick="ExportarExcel"><i class="oi oi-spreadsheet" /> Exportar a Excel</button>
                                <AuthorizeView Roles="Planner">
                            <Authorized>
                                        <button type="button" class="btn btn-warning" style="margin-left:5px;" @onclick="ApproveDemandPlan" disabled="@(!isDemandPlanActive)"><i class="oi oi-check" /> Aprobar Plan</button>
                                        @if (estadoPlanDemanda != EnumStatus.Activo.ToString())
                                        {
                                            <button type="button" class="btn btn-warning" style="margin-left:5px;" @onclick="ActiveDemandPlan" disabled="@(isDemandPlanActive)"><i class="oi oi-aperture" /> Activar Plan</button>
                                            
                                        }
                                    </Authorized>
                                </AuthorizeView>
                                <label class="btn btn-secondary" style="margin-left:5px;" disabled>Plan de demanda estado @estadoPlanDemanda</label>
                                </div>                              
                            </div>                                                            
                        </ToolBarContent>
                        <Columns>
                            <SelectColumn T="CollaborativeDemandDTO" />
                            <PropertyColumn Property="x => x.CollaborativeDemandId" IsEditable="false" Hidden />
                             <PropertyColumn Property="x => x.CollaborativeDemandDetailId" IsEditable="false" Hidden />
                             <PropertyColumn Property="x => x.CustomerName" IsEditable="false" Title="Cliente" Class="mud-col-lg-6 mud-col-md-8" />
                             <PropertyColumn Property="x => x.CityName" IsEditable="false" Title="Ciudad" Class="mud-col-lg-6 mud-col-md-8" />
                             <PropertyColumn Property="x => x.DistributionChannel" IsEditable="false" Title="Canal Distribución" Class="mud-col-lg-6 mud-col-md-8" />
                             <PropertyColumn Property="x => x.ShippingPointName" IsEditable="false" Title="Punto de Envío" Class="mud-col-lg-6 mud-col-md-8" />
                             <PropertyColumn Property="x => x.ProductName" IsEditable="false" Title="Producto" Class="mud-col-lg-6 mud-col-md-8" />
                             <PropertyColumn Property="x => x.YearMonth" IsEditable="false" Title="Año-Mes" Class="mud-col-lg-6 mud-col-md-8" />
                             <PropertyColumn Property="x => x.Quantity" IsEditable="true" Title="Colaboración" Format="N2" Culture="@(new CultureInfo("en-US"))" Class="mud-col-lg-6 mud-col-md-8" />
                         </Columns>
                         <PagerContent>
                             <MudDataGridPager T="CollaborativeDemandDTO" />
                         </PagerContent>
                     </MudDataGrid>
                     <div class="d-flex flex-wrap mt-4 visually-hidden">
                         <div class="d-flex justify-start align-center">

                             <MudSwitch @bind-Checked="@_isCellEditMode">Cell</MudSwitch>
                         </div>
                         <div class="d-flex justify-start align-center">
                             <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Manual</p>
                             <MudSwitch @bind-Checked="@_editTriggerRowClick">On Row Click</MudSwitch>
                         </div>
                     </div>
                     <MudExpansionPanels Style="flex:1">
                         <MudExpansionPanel Text="Show Events">
                             @foreach (var message in _events)
                            {
                                <MudText Typo="@Typo.body2">@message</MudText>
                            }
                            @if (_events.Count > 0)
                            {
                                <div class="d-flex">
                                    <MudSpacer />
                                    <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
                                </div>
                            }
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </div>
            </div>
        </div>    
}
@code {

    private int currentPage = 1;
    private int totalPages;
    private string? _searchString;
    private bool _sortNameByLength;
    private bool _isReadOnly = false;
    private bool _isCellEditMode = true;
    private bool _editTriggerRowClick;
    private bool isDemandPlanActive = true;
    private string estadoPlanDemanda = "";    
    private DateTime collaborationEndDate;

    public UserCalendarDTO? userCalendarDTO { get; set; }

    private List<string> _events = new();

    public List<CollaborativeDemandDTO>? CollaborativeDemands { get; set; }

    public List<CollaborativeDemandComponentsDetail>? ComponentDetails { get; set; }
    public List<Status>? Status { get; set; }
    private List<CollaborationCycle>? collaborationCyclesList;
    private CollaborationCycle collaborationCycle;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";


    protected async override Task OnInitializedAsync()
    {
        await ValidateEditionGrid();
        await LoadStatudCollaborationAsync();
        await LoadAsync();

    }

    private async Task<bool> ValidateEditionGrid()
    {
        var url = $"api/CollaborativeDemand/UserCalendar";
        var response = await repository.GetAsync<UserCalendarDTO>(url);
        try
        {
            var user = response.Response;
            if (response.Error)
            {

                var message = await response.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return false;
            }
            if (user.Role != UserType.Planner.ToString())
            {
                if (user.CollaboartionEndDate < DateTime.Now)
                {
                    _isCellEditMode = false;
                }

            }

            return true;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }

    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        var ok = await LoadListAsync(page);
        if (ok)
        {
            await LoadPagesAsync();
        }
    }

    private async Task<bool> LoadListAsync(int page)
    {
        //var url = $"api/CollaborativeDemand?page={page}";
        var url = $"api/CollaborativeDemand/All";
        var response = await repository.GetAsync<List<CollaborativeDemandDTO>>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        CollaborativeDemands = response.Response;

        return true;
    }

    private async Task LoadPagesAsync()
    {
        var url = $"api/CollaborativeDemand/totalPages";
        var response = await repository.GetAsync<int>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        totalPages = response.Response;
    }

    private async Task LoadStatudCollaborationAsync()
    {
        await LoadCollaborationCyclesAndStatusAsync();
        var collaborationCycles = collaborationCyclesList!;

        estadoPlanDemanda = collaborationCyclesList!
        .Where(c => c.Period == int.Parse(DateTime.Now.ToString("yyyyMM")))
        .Select(c => c.Status!.Name)
        .FirstOrDefault()!;

        if (estadoPlanDemanda == EnumStatus.Aprobado.ToString())
        {
            _isCellEditMode = false;
            isDemandPlanActive = false;

        }
    }

    private async Task ApproveDemandPlan()
    {
        await ChangeDemandPlandStatus(EnumStatus.Aprobado.ToString());
        
    }

    private async Task ActiveDemandPlan()
    {
        await ChangeDemandPlandStatus(EnumStatus.Activo.ToString());

    }

    private async Task ChangeDemandPlandStatus(string status)
    {
        await LoadStatusAsync();

        var statusId = Status!
            .Where(s => s.Name == status)
            .Select(s => s.Id)
            .FirstOrDefault();

        await LoadCollaborationCyclesAsync();
        var collaborationCylceId = collaborationCyclesList!
        .Where(c => c.Period == int.Parse(DateTime.Now.ToString("yyyyMM")))
        .Select(c => c.Id)
        .FirstOrDefault();

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Esta seguro que quieres cambiar el plan de demanda a estado{status}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }
        var collaborationCycle = new CollaborationCycle
            {
                Id = collaborationCylceId,
                Period = int.Parse(DateTime.Now.ToString("yyyyMM")),
                StatusId = statusId
            };
        await UpdateAsync(collaborationCycle);
        _isCellEditMode = status == EnumStatus.Activo.ToString(); 
        isDemandPlanActive = status == EnumStatus.Activo.ToString();
        estadoPlanDemanda = status;
    }

    private async Task LoadStatusAsync()
    {        
        var responseHttp = await repository.GetAsync<List<Status>>("/api/Status/combo");
        if (responseHttp.Error)
        {            
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        Status = responseHttp.Response;        
    }

    private async Task LoadCollaborationCyclesAsync()
    {

        var responseHttp = await repository.GetAsync<List<CollaborationCycle>>("/api/CollaborationCycles/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        collaborationCyclesList = responseHttp.Response;
    }

    private async Task LoadCollaborationCyclesAndStatusAsync()
    {

        var responseHttp = await repository.GetAsync<List<CollaborationCycle>>("/api/CollaborationCycles/all");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        collaborationCyclesList = responseHttp.Response;
    }
    private async Task UpdateAsync(CollaborationCycle collaborationCycle)
    {
        if (collaborationCycle!.Id <= 0)
        {
            await sweetAlertService.FireAsync("Error", "Falta el Id del Calendario de Colaboración.", SweetAlertIcon.Error);
            return;
        }
        else
        {

            var response = await repository.PutAsync($"/api/CollaborationCycles", collaborationCycle);
            if (response.Error)
            {
                var message = await response.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }

            var toast = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.BottomEnd,
                    ShowConfirmButton = true,
                    Timer = 3000
                });
            await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Plan de demanda aprobada con éxito.");
        }
    }

    void RowClicked(DataGridRowClickEventArgs<CollaborativeDemandDTO> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void StartedEditingItem(CollaborativeDemandDTO item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(CollaborativeDemandDTO item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    async Task CommittedItemChanges(CollaborativeDemandDTO item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");

        if (!EsDecimalOEntero(item.Quantity))
        {
            await sweetAlertService.FireAsync("Error", "El valor de colaboración no es un número decimal o entero válido.", SweetAlertIcon.Error);
            return;
        }

        var collaboration = new CollaborativeDemandComponentsDetail
            {
                Id = item.CollaborativeDemandDetailId,
                Quantity = item.Quantity,
                CollaborativeDemandId = item.Id

            };

        var responseHTTP = await repository.PutAsync("api/CollaborativeDemandComponentsDetail/full", collaboration);
        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Cambios guardados con éxito.");
    }

    bool EsDecimalOEntero(decimal cantidad)
    {
        return decimal.Truncate(cantidad) == cantidad;
    }    

    private async Task ExportarExcel()
    {
        int page = 1;
        try
        {          

            var url = $"api/CollaborativeDemand/ExcelGenerate?page={page}";
            
            var responseHTTP = await repository.GetExportAsync(url);

            if (responseHTTP.Error)
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                return;
            }

            var toast = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.BottomEnd,
                    ShowConfirmButton = true,
                    Timer = 3000
                });
            await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Archivo enviado al correo electrónico con éxito.");
        }

        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }


}