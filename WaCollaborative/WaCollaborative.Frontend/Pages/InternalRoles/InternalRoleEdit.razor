@page "/internalRoles/edit/{InternalRoleId:int}"
@attribute [Authorize(Roles = "Planner")]
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

@if (internalRole is null)
{
    <Loading />
}
else
{
    <InternalRoleForm @ref="internalRoleForm" InternalRole="internalRole" OnValidSubmit="UpdateAsync" ReturnAction="Return" Title="@title" />
}

@code {
    private InternalRole? internalRole;
    private InternalRoleForm? internalRoleForm;
    private string title = "Actualizar Rol";

    private bool loading;

    [Parameter]
    public int InternalRoleId { get; set; }

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadInternalRoleAsync();
    }

    private async Task LoadInternalRoleAsync()
    {
        var response = await repository.GetAsync<InternalRole>($"/api/internalroles/{InternalRoleId}");
        if (response.Error)
        {
            if (response.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                Return();
            }
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        internalRole = response.Response;
    }

    private async Task UpdateAsync()
    {
        if (internalRole!.Id <= 0)
        {
            await sweetAlertService.FireAsync("Error", "Falta el Id del rol.", SweetAlertIcon.Error);
            return;
        }
        else
        {
           
            var response = await repository.PutAsync($"/api/internalroles", internalRole);
            if (response.Error)
            {
                var message = await response.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }

            await BlazoredModal.CloseAsync(ModalResult.Ok());
            Return();

            var toast = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.BottomEnd,
                    ShowConfirmButton = true,
                    Timer = 3000
                });
            await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro actualizado con éxito.");
        }
    }

    private void Return()
    {
        internalRoleForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/internalroles");
    }

}