@page "/collaboration"


<MudDataGrid T="Element" MultiSelection="true" Items="@Elements" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="Element" />
        <PropertyColumn Property="x => x.Number" Title="Nr" Sortable="false" Filterable="false" />
        <PropertyColumn Property="x => x.Producto" />
        <PropertyColumn Property="x => x.Cliente" SortBy="@_sortBy" />        
        <PropertyColumn Property="x => x.CanalDistribucion" Title="Canal de Distribución" />
        <PropertyColumn Property="x => x.Categoria" Title="Category" />
        
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Element" />
    </PagerContent>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@_sortNameByLength" Color="Color.Primary">Sort Name Column By Length</MudSwitch>
</div>

<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if (_events.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>


@code {

    private IEnumerable<Element> Elements = new List<Element>();
    private string? _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();

    private Func<Element, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Cliente!.Length;
        else
            return x.Cliente!;
    };

    private Func<Element, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Producto!.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Cliente!.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        // if ($"{x.Number} {x.Position} {x.CanalDistribucion}".Contains(_searchString))
        //     return true;

        return false;
    };
    protected override async Task OnInitializedAsync()
    {        
         Elements =  new List<Element>
        {
            new Element { Number = 1, Producto = "Lava Loza",Cliente = "Éxito",Position = 0,CanalDistribucion = "Mayorista",Categoria = "Aseo Hogar" },
            new Element { Number = 2, Producto = "Detergente",Cliente = "Éxito",Position = 17,CanalDistribucion = "Mayorista",Categoria = "Aseo Hogar" }
            
        };
    }

    void RowClicked(DataGridRowClickEventArgs<Element> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<Element> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    private class Element
    {
        public int Number { get; set; }
        public string? Producto { get; set; }
        public string? Cliente { get; set; }
        public int Position { get; set; }
        public string? CanalDistribucion { get; set; }
        public string? Categoria { get; set; }

    }
}

