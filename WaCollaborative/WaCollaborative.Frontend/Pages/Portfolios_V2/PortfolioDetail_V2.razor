@page "/portfolios/portfoliodetails/{CollaborativeDemandId:int}"

@attribute [Authorize(Roles = "Planner")]
@inject IRepository repository
@inject SweetAlertService sweetAlertService

    @if (collaborativeDemandUsers is null)
{
    <Loading />
}
else
{
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-briefcase"></i> Portafolios - Plan de Demanda
                <a class="btn btn-sm btn-primary float-end" @onclick=@(() => ShowModalAsync(CollaborativeDemandId))><i class="oi oi-plus"></i> Adicionar Usuario</a>
                <a class="btn btn-sm btn-success float-end" href="/portfolios"><i class="oi oi-arrow-thick-left" /> Regresar</a>                
            </span>
        </div>
        <div class="card-body">
            <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                <div>
                    <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar portafolio..." @bind-value="Filter" />
                </div>
                <div class="mx-1">
                    <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                </div>
            </div>

            <GenericList List="collaborativeDemandUsers">
                <NoRecords>
                    <p>Aun no hay portafolios registrados.</p>
                </NoRecords>
                <Body>
                    <Pagination CurrentPage="currentPage"
                                TotalPages="totalPages"
                                SelectedPage="SelectedPageAsync" />

                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th style="width:210px">Nombre Usuario</th>
                                <th style="width:210px">Email</th>
                                <th style="width:210px">Rol</th>
                                <th style="width:210px">Períodos</th>
                                <th style="width:168px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in collaborativeDemandUsers!)
                            {
                                <tr>
                                    <td>@user.User!.FullName</td>
                                    <td>@user.User.Email</td>
                                    <td>@user.User.InternalRole!.Name </td>
                                    <td><a href="@($"/portfolios/portfolioPeriodDetails/{CollaborativeDemandId}/{@user.User.Id}")">Ver periodos</a> </td>                                                                        
                                    <td><button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(user))><i class="oi oi-trash" /> Borrar</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </Body>
            </GenericList>
        </div>
    </div>
}
@code {
    private List<CollaborativeDemandUsers>? collaborativeDemandUsers;
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    public int CollaborativeDemandId { get; set; }

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        var ok = await LoadListAsync(page);
        if (ok)
        {
            await LoadPagesAsync();
        }
    }

    private async Task<bool> LoadListAsync(int page)
    {
        var url = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url = $"api/CollaborativeDemandUsers?page={page}";
        }
        else
        {
            url = $"api/CollaborativeDemandUsers?page={page}&filter={Filter}";
        }

        var response = await repository.GetAsync<List<CollaborativeDemandUsers>>($"/api/CollaborativeDemandUsers/{CollaborativeDemandId}");

        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }

        collaborativeDemandUsers = response.Response;
        return true;
    }

    private async Task<bool> LoadPagesAsync()
    {
        var url = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url = $"api/portfolios/totalPages";
        }
        else
        {
            url = $"api/portfolios/totalPages?filter={Filter}";
        }

        var response = await repository.GetAsync<int>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        totalPages = response.Response;
        return true;
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task ShowModalAsync(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;
       
        if (isEdit)
        {
            modalReference = Modal.Show<CollaborativeDemandUsersCreate>(string.Empty, new ModalParameters().Add("CollaborativeDemandId", id));
        }
        else
        {
            modalReference = Modal.Show<CollaborativeDemandUsersCreate>(string.Empty, new ModalParameters().Add("CollaborativeDemandId", CollaborativeDemandId));
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }

    private async Task DeleteAsync(CollaborativeDemandUsers user)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Esta seguro que quieres borrar el portafolio: {user.User!.FullName}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var response = await repository.DeleteAsync($"api/CollaborativeDemandUsers/{user.Id}");
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await LoadAsync();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }
}
