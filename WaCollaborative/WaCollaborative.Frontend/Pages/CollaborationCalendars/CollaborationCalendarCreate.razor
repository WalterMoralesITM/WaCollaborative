@page "/collaborationCalendars/create"
@attribute [Authorize(Roles = "Planner")]
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

@if (loading)
{
    <Loading />
}
else
{
    <CollaborationCalendarForm @ref="collaborationCalendarForm" CollaborationCalendar="collaborationCalendar" OnValidSubmit="CreateAsync" ReturnAction="Return" Title="@title" />
}

@code {
    private CollaborationCalendar collaborationCalendar= new();
    private CollaborationCalendarForm? collaborationCalendarForm;
    private string title = "Guardar Nuevo Calendario de Colaboración";
    private bool loading;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private async Task CreateAsync()
    {

        var response = await repository.PostAsync("/api/collaborationCalendars", collaborationCalendar);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro creado con éxito.");

    }

    private void Return()
    {
        collaborationCalendarForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/collaborationCalendars");
    }

}