@page "/CollaborativeDemand/CollaborativeDemandEdit/{CollaborativeDemandId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@using System.Collections.Generic
@using System.Linq.Expressions;
@using System.Reflection;

@attribute [Authorize(Roles = "Planner,Collaborator")]

@if (CollaborativeDemandComponentsDetail is null)
{
    <Loading />
}
else
{
    <MudDataGrid T="CollaborativeDemandComponentDTO" Items="@CollaborativeDemandComponentsDetailsDTO"
                 SortMode="SortMode.Multiple" Filterable="true"
                 ReadOnly="@_isReadOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
                 StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
                 Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)"
                 Hideable="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Demanda Collaborativa</MudText>
            <MudSpacer />
            <MudTextField Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <HierarchyColumn T="CollaborativeDemandComponentDTO" />
            <SelectColumn T="CollaborativeDemandComponentDTO" />
            <PropertyColumn Property="x => x.CollaborativeDemandId" />
            <PropertyColumn Property="x => x.YearMonth" Title="Año Mes" Sortable="true" Filterable="false" />
            <PropertyColumn Property="x => x.Quantity" Title="Cantidad" IsEditable="true" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudStack Row>
                     <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">Hire</MudButton>
                 </MudStack>
             </CellTemplate>
         </TemplateColumn>
     </Columns>

 </MudDataGrid>
    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@_readOnly" Color="Color.Primary">Read Only</MudSwitch>
        <div class="d-flex justify-start align-center">
            <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Form</p>
            <MudSwitch @bind-Checked="@_isCellEditMode">Cell</MudSwitch>
        </div>
        <div class="d-flex justify-start align-center">
            <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Manual</p>
            <MudSwitch @bind-Checked="@_editTriggerRowClick">On Row Click</MudSwitch>
        </div>
    </div>

    <MudExpansionPanels Style="flex:1">
        <MudExpansionPanel Text="Show Events">
            @foreach (var message in _events)
            {
                <MudText Typo="@Typo.body2">@message</MudText>
            }
            @if (_events.Count > 0)
            {
                <div class="d-flex">
                    <MudSpacer />
                    <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
                </div>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>
}

@code {
    private int currentPage = 1;
    private int totalPages;
    private string? _searchString;
    private bool _sortNameByLength;
    private bool _isReadOnly = false;
    private bool _readOnly = false;
    private bool _isCellEditMode = true;
    private List<string> _events = new();
    private bool _editTriggerRowClick;    

    public List<CollaborativeDemandComponentDTO>? CollaborativeDemandComponentsDetailsDTO { get; set; }
    public List<CollaborativeDemandComponentsDetail>? CollaborativeDemandComponentsDetail { get; set; }

    [Parameter]
    public int CollaborativeDemandId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }



    private async Task LoadAsync()
    {
        var url = $"api/CollaborativeDemand/{CollaborativeDemandId}";
        var response = await repository.GetAsync<List<CollaborativeDemandComponentsDetail>>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return ;
        }
        CollaborativeDemandComponentsDetail = response.Response;
        
    }    


    void RowClicked(DataGridRowClickEventArgs<CollaborativeDemandComponentDTO> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    // events
    void StartedEditingItem(CollaborativeDemandComponentDTO item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(CollaborativeDemandComponentDTO item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(CollaborativeDemandComponentDTO item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

}
