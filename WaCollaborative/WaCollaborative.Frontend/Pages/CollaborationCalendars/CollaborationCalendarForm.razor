@inject SweetAlertService sweetAlertService
@inject IRepository repository

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigationAsync"></NavigationLock>

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <span>
                <label> @Title:</label>
                <button class="btn btn-sm btn-primary float-end" type="submit"><i class="oi oi-check" /> Registrar</button>
            </span>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-12">
                    <div class="mb-3">
                        <div>
                            <label>Fecha Inicial:</label>
                            <InputDate  class="form-control" @bind-Value="@CollaborationCalendar.StartDate" />
                            <br />
                            <label>Fecha Final:</label>
                            <InputDate  class="form-control" @bind-Value="@CollaborationCalendar.EndDate" />
                            <br />
                            <label>Rol:</label>
                            <div>
                                <select class="form-select" @bind="CollaborationCalendar.InternalRoleId">
                                    <option value="0">-- Seleccione un rol --</option>
                                    @if (internalRoles is not null)
                                    {
                                        @foreach (var role in internalRoles)
                                        {
                                            <option value="@role.Id">@role.Name</option>
                                        }
                                    }
                                </select>
                                <ValidationMessage For="@(() => CollaborationCalendar.InternalRoleId)" />
                            </div>

                            <br />
                            <label>Período:</label>
                            <div>
                                <select class="form-select" @bind="CollaborationCalendar.CollaborationCycleId">
                                    <option value="0">-- Seleccione un período --</option>
                                    @if (collaborationCycles is not null)
                                    {
                                        @foreach (var cycle in collaborationCycles)
                                        {
                                            <option value="@cycle.Id">@cycle.Period</option>
                                        }
                                    }
                                </select>
                                <ValidationMessage For="@(() => CollaborationCalendar.CollaborationCycleId)" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-2">
                    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {

    private EditContext editContext = null!;

    [EditorRequired]
    [Parameter]
    public CollaborationCalendar CollaborationCalendar{ get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    [EditorRequired]
    [Parameter]
    public string Title { get; set; } = null!;

    public bool FormPostedSuccessfully { get; set; }

    private List<InternalRole>? internalRoles;

    private List<CollaborationCycle>? collaborationCycles;

    private bool loading;

    protected override async Task OnInitializedAsync()
    {
        CollaborationCalendar.StartDate = DateTime.Now;
        CollaborationCalendar.EndDate = DateTime.Now.AddDays(1);
        editContext = new(CollaborationCalendar);        
        Title = Title ?? "Guardar Nuevo Calendario de Colaboración";

        await LoadRolesAsync();
        await LoadCollaborationCyclesAsync();
    }

    private async Task OnBeforeInternalNavigationAsync(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }

    private async Task LoadRolesAsync()
    {
        loading = true;
        var responseHttp = await repository.GetAsync<List<InternalRole>>("/api/internalRoles/combo");
        if (responseHttp.Error)
        {
            loading = false;
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        internalRoles = responseHttp.Response;
        loading = false;
    }

    private async Task LoadCollaborationCyclesAsync()
    {
        loading = true;
        var responseHttp = await repository.GetAsync<List<CollaborationCycle>>("/api/CollaborationCycles/combo");
        if (responseHttp.Error)
        {
            loading = false;
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        collaborationCycles = responseHttp.Response;
        loading = false;
    }
}